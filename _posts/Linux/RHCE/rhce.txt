

rhce
中文输入：
# yum -y install "ibus-table-chinese*"  "cjk*"  "*pinyin*"
# reboot
# Settings -----> Region & Language -----> Input Sources -----> Chinese(Intelligent Pinyin)

练习环境:
serverX	 172.25.X.11
desktopX 172.25.X.10
root密码:redhat

example.com: 172.25.X.0/24
cracker.com: 172.24.3.0/24

[kiosk@foundation0 ~]$ ssh -X root@server0
[kiosk@foundation0 ~]$ ssh -X root@desktop0


0. yum
==server/desktop==  --> 两台都需要配置
# rm -rf /etc/yum.repos.d/*
# yum-config-manager --add-repo="http://content.example.com/rhel7.0/x86_64/dvd"
# vim /etc/yum.conf
gpgcheck=0
# yum -y install httpd


1. SELinux
==server/desktop==  --> 两台都需要配置
# vim /etc/sysconfig/selinux
SELINUX=enforcing


2. ssh access
按以下要求配置SSH访问：
1. 用户能够从域group3.example.com内的客户端通过SSH远程访问您的两个虚拟机系统
2. 在域my133t.org内的客户端不能访问您的两个虚拟机系统

==server/desktop== --> 两台都需要配置
解法1：
修改/etc/hosts.allow文件
添加一行 sshd: 172.24.11.
修改/etc/hosts.deny文件
添加一行 sshd: 172.25.0.
解法2：
# firewall-cmd --zone=block  --add-source=172.24.3.0/24  --permanent
# firewall-cmd --reload
or
# firewall-config
# firewall-cmd --permanent --list-all
public (default)
  interfaces: 
  sources: 
  services: dhcpv6-client ssh
  ports: 
  masquerade: no
  forward-ports: 
  icmp-blocks: 
  rich rules: 
	rule family="ipv4" source address="172.24.3.0/24" service name="ssh" reject


3. command alias
自定义用户环境, 在系统 system1 和 system2 上创建自定义命名名为psnew 此自定义命令将执行以下命令：
/bin/ps – Ao pid,tt,user,fname,rsz
此命令对系统中所有用户有效

==server/desktop==  --> 两台都需要配置
# vim /etc/bashrc
alias psnew='ps -Ao user,pid,ppid,command'

# exit
$ ssh -X root@server0 
# psnew


4. samba1
在system1上配置SMB服务:
您的SMB服务器必须是STAFF工作组一个成员
共享/smb1目录, 共享名必须为smb1, 只有domain11.example.com域内的客户端可以访问smb1共享
smb1必须是可以浏览的, 用户ldapuser1必须能够读取共享中的内容，需要需要的话，验证密码是redhat

==server==
[root@server0 ~]# yum -y install samba samba-client cifs-utils
[root@server0 ~]# mkdir /smb1

[root@server0 ~]# id ldapuser1
uid=1701(ldapuser1) gid=1701(ldapuser1) groups=1701(ldapuser1)
[root@server0 ~]# smbpasswd -a ldapuser1		//设置samba用户密码

[root@server0 ~]# vim /etc/samba/smb.conf
workgroup = STAFF
[smb1]
        path = /smb1
        hosts allow = 172.25.0.0/24			//替换相应的网段172.25.X.0/24
        browseable = yes

[root@server0 ~]# systemctl enable smb nmb		//设置开机启动
[root@server0 ~]# systemctl restart smb nmb

[root@server0 ~]# chcon -R -t samba_share_t /smb1	//设置SELinux权限

[root@server0 ~]# firewall-config			//firewall
or 
[root@server0 ~]# firewall-cmd --add-service=samba --permanent
[root@server0 ~]# firewall-cmd --add-service=mountd –permanent

[root@server0 ~]# firewall-cmd --permanent --list-all
  services: dhcpv6-client samba ssh


==desktop==
[root@desktop0 ~]# yum -y install samba-client cifs-utils
[root@desktop0 ~]# mkdir /mnt/smb1
[root@desktop0 ~]# mount -o user=ldapuser1,pass=redhat //server0/smb1 /mnt/smb1	--手动
[root@desktop0 ~]# vim /etc/fstab
//server0/smb1  /mnt/smb1       cifs    defaults,user=ldapuser1,pass=redhat 0 0

[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df
//server0/smb1  10473900 3187728   7286172  31% /mnt/smb1


5. samba2
在systeml共享通过SMB目录/devops满足下列要求：
1). 共享名为smb2
2). 共享目录smb2只能被domain11.example.com域中的客户端使用
3). 共享目录smb2必须可以被浏览
4). 用户ldapuser1必须能以读的方式访问此共享，访问密码是redhat
5). 用户ldapuser2必须能以读写的方式访问此共享，访问密码是redhat
6). 此共享永久挂载在system2.domain11.example.com上的/mnt/smb2用户，并使用用户ldapuser1作为认证,任何用户可以通过用户ldapuser2来临时获取写的权限

==server==
[root@server0 ~]# id ldapuser1
uid=1701(ldapuser1) gid=1701(ldapuser1) groups=1701(ldapuser1)
[root@server0 ~]# id ldapuser2
uid=1702(ldapuser2) gid=1702(ldapuser2) groups=1702(ldapuser2)

[root@server0 ~]# smbpasswd -a ldapuser1		//设置samba用户密码
[root@server0 ~]# smbpasswd -a ldapuser2		//设置samba用户密码

[root@server0 ~]# mkdir /smb2
[root@server0 ~]# setfacl -m u:ldapuser2:rwx /smb2	//准备目录，设置权限

[root@server0 ~]# vim /etc/samba/smb.conf		//配置共享
[smb2]
        path = /smb2
        hosts allow = 172.25.0.0/24			//替换相应的网段172.25.X.0/24
        valid users = ldapuser1,ldapuser2		//可以访问的用户（只读）
        write list = ldapuser2				//可以写入的用户

[root@server0 ~]# systemctl restart smb nmb		//重启服务

[root@server0 ~]# chcon -R -t samba_share_t /smb2	//设置SELinux权限


==desktop==
[root@desktop0 ~]# mkdir /mnt/smb2
[root@desktop0 ~]# vim /etc/fstab
//server0/smb2  /mnt/smb2       cifs    defaults,multiuser,user=ldapuser1,pass=redhat 0 0

[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df
//server0/smb1  10473900 3187728   7286172  31% /mnt/smb1
//server0/smb2  10473900 3187728   7286172  31% /mnt/smb2

测试：
a. ldapuser1 读
[root@desktop0 ~]# su - ldapuser1
[ldapuser1@desktop0 ~]$ cifscreds add server0		//重新从samba服务器获得自己的访问凭据
Password: 						//自己的samba密码
[ldapuser1@desktop0 ~]$ cp -rf /etc/hosts /mnt/smb2
cp: cannot create regular file ‘/mnt/smb2/hosts’: Permission denied

b. ldapuser2 读写
[root@desktop0 ~]# su - ldapuser2
[ldapuser2@desktop0 ~]$ cifscreds add server0
Password: 						//自己的samba密码
[ldapuser2@desktop0 ~]$ cp -rf /etc/hosts /mnt/smb2


6. nfs1
在system1配置NFS服务，要求如下：
1). 以只读的方式共享目录/nfs1同时只能被domain11.example.com域中的系统访问

==server==
[root@server0 ~]# yum -y install nfs-utils
[root@server0 ~]# mkdir /nfs1
[root@server0 ~]# vim /etc/exports		
/nfs1   172.25.0.0/24(ro,sync)			//共享及访问控制

[root@server0 ~]# systemctl enable nfs-server.service 	//设置开机启动
[root@server0 ~]# systemctl restart nfs-server.service 	//启动

[root@server0 ~]# firewall-config			//firewall
or 
[root@server0 ~]# firewall-cmd --add-service=nfs --permanent
[root@server0 ~]# firewall-cmd --add-service=rpc-bind --permanent
[root@server0 ~]# firewall-cmd --add-service=mountd --permanent
[root@server0 ~]# firewall-cmd --reload

==desktop==
[root@desktop0 ~]# yum -y install nfs-utils
[root@desktop0 ~]# mkdir /mnt/nfs1
[root@desktop0 ~]# vim /etc/fstab
server0:/nfs1   /mnt/nfs1       nfs     defaults        0 0
[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df
server0:/nfs1   10473984 3188224   7285760  31% /mnt/nfs1


7. secure nfs
在system2上挂载一个system1.domain11.example.com的NFS共享,并符合下列要求：
1). /public挂载在下面的目录上/mnt/nfsmount
2). /protected挂载在下面的目录上/mnt/nfssecure并使用安全的方式，密钥下载URL如下：http://host.domain11.example.com/materials/nfs_client.keytab
3). 用户ldapuser5能够在/mnt/nfssecure/project上创建文件
4). 这些文件系统在系统启动时自动挂线

==server==
[root@server0 ~]# mkdir -p /nfs2/private
[root@server0 ~]# chown ldapuser5 /nfs2/private/

//下载用于安全认证的keytab
[root@server0 ~]# wget http://classroom.example.com/pub/keytabs/server0.keytab -O /etc/krb5.keytab

[root@server0 ~]# vim /etc/sysconfig/nfs	
# Optional arguments passed to rpc.nfsd. See rpc.nfsd(8)
RPCNFSDARGS="-V 4.2"					//定义NFS使用的协议版本4.2

[root@server0 ~]# vim /etc/exports			//共享
/nfs2   172.25.0.0/24(rw,sync,sec=krb5p)

[root@server0 ~]# systemctl restart nfs-server.service 	//重启
[root@server0 ~]# systemctl enable nfs-secure-server.service 
[root@server0 ~]# systemctl restart nfs-secure-server.service

==desktop==
[root@desktop0 ~]# wget http://classroom.example.com/pub/keytabs/desktop0.keytab -O /etc/krb5.keytab
[root@desktop0 ~]# systemctl enable nfs-secure
[root@desktop0 ~]# systemctl restart nfs-secure.service 

[root@desktop0 ~]# mkdir /mnt/nfs2
[root@desktop0 ~]# vim /etc/fstab
server0:/nfs2   /mnt/nfs2       nfs     defaults,v4.2,sec=krb5p 0 0
[root@desktop0 ~]# mount -a

[root@desktop0 ~]# su - ldapuser5
Creating home directory for ldapuser5.
[ldapuser5@desktop0 ~]$ touch /mnt/nfs2/private/file1
touch: cannot touch ‘/mnt/nfs2/private/file1’: Permission denied

[ldapuser5@desktop0 ~]$ kinit 				//获得kerberos的凭据
Password for ldapuser5@EXAMPLE.COM: 			//kerberos
[ldapuser5@desktop0 ~]$ touch /mnt/nfs2/private/file1


8. team
在systeml. group3.example.com和system2. group3.example.com之间按以下要求配置一个链路：
1). 此链路使用接口eth1和eth2
2). 此链路在一个接口失效时仍然能工作
3). 此链路在systeml使用下面的地址172.16.3.20/255.255.255.0
4). 此链路在system2使用下面的地址172.16.3.25/255.255.255.0
5). 此链路在系统重启之后依然保持正常状态

如果不记得name如何写可以在/var/share/doc/team-1.9/example_configs/查看例子。

==server/desktop==  --> 两台都需要配置
解法1：
nmcli connection  add con-name team0 type team ifname team0 config '{"runner":{"name":"activebackup"}}' 
nmcli con modify team0 ipv4.addresses '172.16.11.25/24'
nmcli connection modify team0 ipv4.method manual
nmcli connection add type team-slave con-name team0-p1 ifname eth1 master team0
nmcli connection add type team-slave con-name team0-p2 ifname eth2 master team0
nmcli connection up team0

nmcli con up team0-p1
nmcli con up team0-p2

解法2：
# nm-connection-editor
Add----> Team
JSON config:						//man teamd.conf (/EXAMPLES)
{"runner":{"name":"activebackup"}}
# ip a
# teamdctl team0 stat
# ping 192.168.0.1
# nmcli connection up "Team connection 1"		//重新加载Team


9. port forward
配置端口转发, 在系统system1 配置端口转发，要求如下：
1). 在172.25.0.0/24网络中的系统，访问system1的本地端口6666将被转发到22
2). 此设置必须永久有效

==server==
[root@server0 ~]# firewall-config
Rich Rules:

[root@server0 ~]# firewall-cmd --permanent --list-all
  rich rules: 
	rule family="ipv4" source address="172.25.0.0/24" forward-port port="6666" protocol="tcp" to-port="22"

==desktop==
[root@desktop0 ~]# ssh root@server0 -p 6666


10. ipv6
配置IPV6地址, 在您的考试系统上配置接口eth0 使用下列IPV6地址：
1). system1上的地址应该是2003：ac18：：305/64
2). system2上的地址应该是2003：ac18：：306/64
3). 两个系统必须能与网络2003：acl8/64内的系统通信
4). 地址必须在重启后依然生效
5). 两个系统必须保持当前的IPV4地址并能通信

==server,desktop==   --> 两台都需要配置
解法1
nmcli con mod eth0 ipv6.addresses “2003:ac18::305/64”
nmcli con mod eth0 ipv6.method manual
systemctl restart network

nmcli con mod eth0 ipv6.addresses “2003:ac18::306/64”
nmcli con mod eth0 ipv6.method manual
systemctl restart network

ping6 2003:ac18::306

解法2
# nm-connection-editor
# nmcli connection up "System eth0"
# ip a

[root@desktop0 ~]# ping6 2000:ac18::306
PING 2000:ac18::1205(2000:ac18::1205) 56 data bytes
64 bytes from 2000:ac18::306: icmp_seq=1 ttl=64 time=19.8 ms


11. mail postfix null client
在系统 system1 和 system2 上配置邮件服务，满足以下要求：
1). 这些系统不接受外部发送来的邮件
2). 在这些系统上本地发送的任何邮件都会自动路由到rhgls.domain11.example.com
3). 从这些系统上发送的邮件显示来自于rhgls.domain11.example.com
4). 您可以通过发送邮件到本地用户’authur’来测试您的配置，系统rhgls.domain11.example.com
5). 已经配置把此用户的邮件转到下列URL rhgls.domain11.example.com/received_mail/11

==server,desktop==   --> 两台都需要配置
# vim /etc/postfix/main.cf
relayhost = [rhgls.domain11.example.com]
myorigin =  domain11.example.com
inet_interfaces = loopback-only
mydestination =
local_transport = error:local mail delivery is disabled
# systemctl restart postfix.service

[root@desktop0 ~]# vim /usr/share/doc/postfix-2.10.1/README_FILES/STANDARD_CONFIGURATION_README


12. iscsi
配置system1提供一个ISCSI 服务磁盘名为
iqn.2014-09.com.example.domain11:system1  并符合下列要求：
1). 服务端口为3260
2). 使用iscsi_store作其后端卷 其大小为3G
3). 此服务能被system2.domian11.example.com访问

==server iscsi target==
a. 准备要通过iscsi共享的卷
[root@server0 ~]# fdisk /dev/vdb			//1G分区
[root@server0 ~]# partprobe /dev/vdb
[root@server0 ~]# ll /dev/vdb*
brw-rw----. 1 root disk 253, 16 Jul  8 18:25 /dev/vdb
brw-rw----. 1 root disk 253, 17 Jul  8 18:25 /dev/vdb1

b. 安装并共享
[root@server0 ~]# yum -y install targetcli
[root@server0 ~]# systemctl enable target.service 
[root@server0 ~]# systemctl restart target.service 
[root@server0 ~]# targetcli
/> ls
o- / ..................................................................... [...]
  o- backstores .......................................................... [...]
  | o- block .............................................. [Storage Objects: 0]
  | o- fileio ............................................. [Storage Objects: 0]
  | o- pscsi .............................................. [Storage Objects: 0]
  | o- ramdisk ............................................ [Storage Objects: 0]
  o- iscsi ........................................................ [Targets: 0]
  o- loopback ..................................................... [Targets: 0]
/> /backstores/block create san10 /dev/vdb1
Created block storage object san10 using /dev/vdb1.

/> /iscsi create iqn.2014-11.com.tianyun:server0
Created target iqn.2014-11.com.tianyun:server0.
Created TPG 1.

/> ls
o- / ..................................................................... [...]
  o- backstores .......................................................... [...]
  | o- block .............................................. [Storage Objects: 1]
  | | o- san10 ..................... [/dev/vdb1 (1.0GiB) write-thru deactivated]
  | o- fileio ............................................. [Storage Objects: 0]
  | o- pscsi .............................................. [Storage Objects: 0]
  | o- ramdisk ............................................ [Storage Objects: 0]
  o- iscsi ........................................................ [Targets: 1]
  | o- iqn.2014-11.com.tianyun:server0 ............................... [TPGs: 1]
  |   o- tpg1 ........................................... [no-gen-acls, no-auth]
  |     o- acls ...................................................... [ACLs: 0]
  |     o- luns ...................................................... [LUNs: 0]
  |     o- portals ................................................ [Portals: 0]
  o- loopback ..................................................... [Targets: 0]

/> /iscsi/iqn.2014-11.com.tianyun:server0/tpg1/acls create iqn.2014-11.com.tianyun:client1
Created Node ACL for iqn.2014-11.com.tianyun:client1

/> /iscsi/iqn.2014-11.com.tianyun:server0/tpg1/luns create /backstores/block/san10 
Created LUN 0.
Created LUN 0->0 mapping in node ACL iqn.2014-11.com.tianyun:client1

/> /iscsi/iqn.2014-11.com.tianyun:server0/tpg1/portals create 172.25.0.11 3260		//本机IP
Using default IP port 3260
Created network portal 172.25.0.11:3260.

/> saveconfig

c. firewall
[root@server0 ~]# firewall-cmd --permanent --add-port=3260/tcp
[root@server0 ~]# firewall-cmd --reload 


配置ISCISI的客户端
配置system2使其能链接在system1上提供的 iqn.2014-09.com.example.domain11:system1并符合以下要求：
1. ISCISI设备在系统启动的期间自动加载
2. 块设备ISCISI上包含一个大小为2100MIB的分区，并格式化为ext4
3. 此分区挂载在/mnt/data上 同时在系统启动的期间自动挂载
==desktop iscsi initiator==
[root@desktop0 ~]# yum -y install iscsi*
[root@desktop0 ~]# vim /etc/iscsi/initiatorname.iscsi		//使用授权访问的IQN
InitiatorName=iqn.2014-11.com.tianyun:client1

[root@desktop0 ~]# systemctl enable iscsid 
[root@desktop0 ~]# systemctl restart iscsid

[root@desktop0 ~]# iscsiadm -m discovery -t st -p server0	//发现 man iscsiadm (/EXAMPLES)
172.25.0.11:3260,1 iqn.2014-11.com.tianyun:server0

[root@desktop0 ~]# scsiadm --mode node --targetname iqn.2014-09.com.example.domain11:system1 --portal 172.24.11.10:3260 –login

[root@desktop0 ~]# systemctl restart iscsi			//login发现的所有iqn
[root@desktop0 ~]# systemctl enable iscsi

[root@desktop0 ~]# fdisk /dev/sda				//对新设备分区
[root@desktop0 ~]# partprobe /dev/sda
[root@desktop0 ~]# ll /dev/sda*
brw-rw----. 1 root disk 8, 0 Jul  8 18:50 /dev/sda
brw-rw----. 1 root disk 8, 1 Jul  8 18:50 /dev/sda1
[root@desktop0 ~]# mkfs.ext4 /dev/sda1
[root@desktop0 ~]# mkdir /mnt/iscsidisk
[root@desktop0 ~]# blkid /dev/sda1				//获得UUID
/dev/sda1: UUID="ccff941d-43eb-4059-84c8-f53ccec08a78" TYPE="ext4" 

[root@desktop0 ~]# vim /etc/fstab
UUID="ccff941d-43eb-4059-84c8-f53ccec08a78" /mnt/iscsidisk ext4 defaults,_netdev 0 0

[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df
/dev/sda1         487634    2318    455620   1% /mnt/iscsidisk


13. http://www0.example.com
在 system1  上配置一个站点 http://systeml. domain11.example.com/  然后执行下述步骤：
1). 从 http://rhgls.domain11.example.com/materials/station.html下载文件，并且将文件重名为 index.html 不要修改此文件的内容, 将文件 index.html 拷贝到您的 web服务器的 DocumentRoot 目录下
2). 来自于 group3.example.com 域的客户端可以访问此web服务
3). 来自于 my133t.org域的客户端拒绝访问此web服务
==server==
注意： 未声明站点的主目录，可以自定义，默认/var/www/html
[root@server0 ~]# yum -y install httpd mod_ssl mod_wsgi
[root@server0 ~]# firewall-cmd --permanent --add-service=http		--80/tcp
[root@server0 ~]# firewall-cmd --permanent --add-service=https		--443/tcp
[root@server0 ~]# firewall-cmd --reload 

[root@server0 ~]# wget http://rhgls.domain11.example.com/materials/station.html -O /var/www/html/index.html
portals
[root@server0 ~]# cd /etc/httpd/conf.d/
[root@server0 conf.d]# vim www0.conf
<VirtualHost *:80>
        ServerName www0.example.com
        DocumentRoot /var/www/html
</VirtualHost>

<Directory /var/www/html>
        <RequireAll>
                Require all granted
                Require not ip 172.24.3.0/24
        </RequireAll>
</Directory>

[root@server0 conf.d]# systemctl enable httpd.service 
[root@server0 conf.d]# systemctl restart httpd.service 


14. https://www0.example.com
为站点http://system1.domain11.example.com配置TLS加密
一个已签名证书从http://host.domain11.example.com/materials/system1.crt获取 
此证书的密钥从http://host.domain11.example.com/materials/system1.key获取 
此证书的签名授权信息从http://host.domain11.example.com/materials/domain11.crt获取

[root@server0 conf.d]# pwd
/etc/httpd/conf.d

[root@server0 conf.d]# wget http://classroom/pub/tls/certs/www0.crt	//证书
[root@server0 conf.d]# wget http://classroom/pub/tls/private/www0.key	//私钥

[root@server0 conf.d]# vim www0.conf					//增加
<VirtualHost *:443>
        ServerName www0.example.com
        DocumentRoot /var/www/html

        SSLEngine on
        SSLCertificateFile /etc/httpd/conf.d/www0.crt
        SSLCertificateKeyFile /etc/httpd/conf.d/www0.key
</VirtualHost>
[root@server0 conf.d]# systemctl restart httpd.service


[root@server0 ~]# vim /etc/httpd/conf.d/ssl.conf	//参考文件


测试【可选】
[root@desktop0 ~]# wget http://classroom/pub/example-ca.crt
[root@desktop0 ~]# firefox				//倒入CA证书

https://www0.example.com 


15. http://server0.example.com
在system1 上扩展您的web服务器，为站点
	http://www.domain11.example.com
创建一个虚拟主机，然后执行下述步骤：
1).  设置DocumentRoot为/var/www/virtual
2).  从 http://rhgls.domain11.example.com/materials/www.html
3).  下载文件重名为index.html 不要对文件index.html 中的内容做任何修改
4).  将文件index.html 放到虚拟主机的DocumentRoot的目录下
5).  确保andy用户能够在/var/www/virtual目录下创建文件
注意：原始站点http://systeml.domian11.example.com/  必须仍然能够访问，名称服务器domain11.example.com提供对主机名www.domain11.example.com的域名解析。

[root@server0 conf.d]# mkdir /var/www/virtual
[root@server0 conf.d]# wget http://classroom.example.com/pub/webs/server.html -O /var/www/virtual/index.html

[root@server0 conf.d]# pwd
/etc/httpd/conf.d
[root@server0 conf.d]# cp www0.conf server0.conf
[root@server0 conf.d]# vim server0.conf
<VirtualHost *:80>
        ServerName server0.example.com
        DocumentRoot /var/www/virtual
</VirtualHost>

<Directory /var/www/virtual>
        Require all granted 
</Directory>
[root@server0 conf.d]# systemctl restart httpd.service


16. http://webapp0.example.com:8888		//运行python应用
在 system1 上配置提供动态web内容，要求如下：
1). 动态内容由名为 dynamic.domain11.example.com 的虚拟主机提供
2). 虚拟主机侦听在端口 8909
3). 从 http://rhgls.domain11.example.com/materials/webapp.wsgi 下载一个脚本，然后放在适当的位置，无论如何不要求修改此文件的内容
4). 客户端访问 http:// dynamic.domain11example.com:8909/ 时，应该接收到动态生成的web页面
5). 此 http:// dynamic.domain11.example.com:8909/ 必须能被 domain11.example.com 域内的所有系统访问

[root@server0 conf.d]# yum -y install mod_wsgi
[root@server0 conf.d]# mkdir /var/www/webapp
[root@server0 conf.d]# wget http://classroom.example.com/pub/webs/webapp.wsgi -O /var/www/webapp/webapp.wsgi

[root@server0 conf.d]# pwd
/etc/httpd/conf.d
[root@server0 conf.d]# cp server0.conf webapp0.conf
[root@server0 conf.d]# vim webapp0.conf
Listen 8888					//增加监听的端口
<VirtualHost *:8888>
        ServerName webapp0.example.com
        WSGIScriptAlias / /var/www/webapp/webapp.wsgi
</VirtualHost>

<Directory /var/www/webapp>
        Require all granted
</Directory>

[root@server0 conf.d]# systemctl restart httpd.service
[root@server0 conf.d]# journalctl -xn		//查看报错日志

[root@server0 conf.d]# semanage port -a -t  http_port_t -p tcp 8888
[root@server0 conf.d]# systemctl restart httpd.service

[root@server0 conf.d]# firewall-cmd --permanent --add-port=8888/tcp
[root@server0 conf.d]# firewall-cmd --reload 

TEST：
http://webapp0.example.com:8888/


17. http://server0.example.com/private
在您的system1 上的web服务器的DocumentRoot目录下 创建一个名为private的目录，要求如下：
1). 从http://rhgls.domain11.example.com/materials/private.html 下载一个文件副本到这个目录，并且重命名为index.html.
2). 不要对这个文件的内容做任何修改
3). 从system1 上，任何人都可以浏览private的内容，但是从其它系统不能访问这个目录的内容

[root@server0 conf.d]# mkdir /var/www/virtual/private
[root@server0 conf.d]# wget http://classroom.example.com/pub/webs/private.html -O /var/www/virtual/private/index.html

[root@server0 conf.d]# vim server0.conf			//增加
<Directory /var/www/virtual/private>
        Require local
</Directory>
[root@server0 conf.d]# systemctl restart httpd.service

http://server0.example.com				//任何主机都可以访问
http://server0.example.com/private			//仅本机可以访问


18. script1
在system1上创建一个名为/root/foo.sh的脚本，让其提供下列特性：
1). 当运行/root/foo.sh redhat,输出为fedora
2). 当运行/root/foo.sh fedora,输出为redhat
3). 当没有任何参数或者参数不是redhat或者fedora时，其错误输出产生以下的信息：/root/foo.sh redhat:fedora

[root@server0 ~]# vim /root/script1.sh
#!/bin/bash
case "$1" in
foo)
        echo "bar"
        ;;
bar)    
        echo "foo"
        ;;
*)
        echo "Usage /root/script1.sh xxx"
esac
[root@server0 ~]# chmod a+x /root/script1.sh
[root@server0 ~]# /root/script1.sh foo
bar
[root@server0 ~]# /root/script1.sh bar
foo
[root@server0 ~]# /root/script1.sh 
Usage /root/script1.sh xxx


19. script2
在system1上创建一个脚本，名为/root/mkusers ,此脚本能实现为系统system1创建本地用户，并且这些用户的用户名来自一个包含用户名列表的文件，同时满足下列要求：
1). 此脚本要求提供一个参数，此参数就是包含用户名列表的的文件
2). 如果没有提供参数，此脚本应该给出下面的提示信息Usage：/root/mkusers然后退出并返回相应的值
3). 如果提供一个不存在的文件名，此脚本应该给出下面的提示信息Input file not found 然后退出并返回相应的值
4). 创建的用户登录shell为/bin/false
5). 此脚本不需要为用户设置密码
6). 您可以从下面的URL中获取用户名列表作为测试用http://rhgls. domain11.example.com/materials/ userlist

[root@server0 ~]# vim user.txt 			//测试脚本的文件
alice
jack
robin
tom
zhuzhu
gougou

[root@server0 ~]# vim /root/script2.sh
#!/bin/bash
#create users
#判断是否有参数
if [ $# -eq 0 ];then
        echo "没有参数!"
        exit 1
fi

#判断是否是文件
if [ ! -f "$1" ];then
        echo "不是文件!"
        exit 2
fi

#创建用户
for user in `cat $1`
do
        id $user &>/dev/null
        if [ $? -eq 0 ];then
                echo "用户$user已存在!"
        else
                useradd $user -s /bin/false
                echo "用户$user创建成功..."
        fi
done

[root@server0 ~]# chmod a+x /root/script2.sh 
[root@server0 ~]# /root/script2.sh user.txt


20. mariadb
配置一个数据库
在 system1上创建一个Maria DB数据库，名为Contacts，并符合以下条件：
1、 数据库应该包含来自数据库复制的内容，复制文件的URL为 
http://rhgls.domain11.example.com/materials/users.mdb
2、 数据库只能被 localhost 访问
3、 除了root用户，此数据库只能被用户Luigi查询，此用户密码为 redhat
4、 root 用户的密码为 redhat，同时不允许空密码登录

在系统 system1 上使用数据库 Contacts ，并使用相应的SQL 查询以回答下列问题：
1、 密码是 tangerine 的人的名字？
2、 有多少人的姓名是 John 同时居住在 Santa Clara ？
==server==
[root@server0 ~]# yum -y groupinstall mariadb mariadb-clients
[root@server0 ~]# systemctl enable mariadb
[root@server0 ~]# systemctl restart mariadb.service 

[root@server0 ~]# firewall-cmd --permanent --add-service=mysql
[root@server0 ~]# firewall-cmd --reload 

[root@server0 ~]# mysql_secure_installation 			//提升安全
Enter current password for root (enter for none): 		//没有密码，直接回车

Set root password? [Y/n] 

Remove anonymous users? [Y/n] 

Disallow root login remotely? [Y/n] 

Remove test database and access to it? [Y/n] 

Reload privilege tables now? [Y/n] 


[root@server0 ~]# mysql -uroot -ptianyun
MariaDB [(none)]> create database Concats;			//创建数据库
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| Concats            |
| mysql              |
| performance_schema |
+--------------------+
4 rows in set (0.00 sec)

MariaDB [(none)]> \q

[root@server0 ~]# wget http://classroom.example.com/pub/mariadb/mariadb.dump
[root@server0 ~]# mysql -uroot -ptianyun Concats < mariadb.dump	//导入表

[root@server0 ~]# mysql -uroot -ptianyun
MariaDB [(none)]> help grant
MariaDB [(none)]> grant select on Concats.* to Luigi@localhost identified by 'tianyun';
MariaDB [(none)]> flush privileges;


测试：
[root@server0 ~]# mysql -uLuigi -ptianyun
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| Concats            |
+--------------------+
2 rows in set (0.00 sec)

MariaDB [(none)]> use Concats

MariaDB [Concats]> show tables;
+-------------------+
| Tables_in_Concats |
+-------------------+
| department        |
| employee          |
+-------------------+
2 rows in set (0.00 sec)

MariaDB [Concats]> desc employee;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| emp_id   | int(11)     | NO   | PRI | NULL    | auto_increment |
| emp_name | varchar(50) | YES  |     | NULL    |                |
| age      | int(11)     | YES  |     | NULL    |                |
| dept_id  | int(11)     | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

MariaDB [Concats]> select * from employee;
+--------+----------+------+---------+
| emp_id | emp_name | age  | dept_id |
+--------+----------+------+---------+
|      1 | tianyun  |   19 |     200 |
|      2 | tom      |   26 |     201 |
|      3 | jack     |   30 |     201 |
|      4 | alice    |   24 |     202 |
|      5 | robin    |   40 |     200 |
|      6 | natasha  |   28 |     204 |
+--------+----------+------+---------+
6 rows in set (0.00 sec)

MariaDB [Concats]> insert into employee values(9,'zhuzhu',16,202);
ERROR 1142 (42000): INSERT command denied to user 'Luigi'@'localhost' for table 'employee'

























